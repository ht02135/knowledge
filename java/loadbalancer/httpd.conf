in conf\httpd.conf

note: i indented 'Content-Security-Polic' for easy reading, but not suppose to

<IfModule headers_module>
    Header edit Set-Cookie ^(.*)$ $1;HttpOnly;Secure
    Header always append X-Frame-Options SAMEORIGIN
    Header always set X-XSS-Protection "1; mode=block"
    Header always set X-Content-Type-Options: nosniff
    Header set Content-Security-Policy "default-src *; style-src 'self' 'unsafe-inline' http://cdn.example.com 
    https://cdn.example.com https://fonts.googleapis.com https://www.google-analytics.com https://api.tiles.mapbox.com 
    https://gitcdn.github.io http://cdnjs.cloudflare.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' 
    http://cdn.example.com https://cdn.example.com https://fonts.googleapis.com https://www.google-analytics.com 
    https://api.tiles.mapbox.com https://gitcdn.github.io http://cdnjs.cloudflare.com; img-src 'self' data: https://www.google-analytics.com *.tiles.mapbox.com https://embed-ssl.wistia.com"
</IfModule>

Content Security Policy (CSP) is a computer security standard introduced to prevent cross-site scripting (XSS),
clickjacking and other code injection attacks resulting from execution of malicious content in the trusted web 
page context.

https://content-security-policy.com/

directive reference
1>default-src: The default-src is the default policy for loading content such as JavaScript, Images, CSS, Fonts, AJAX requests, Frames, HTML5 Media
'self' cdn.example.com

2>script-src: Defines valid sources of JavaScript. 
'self' js.example.com

3>style-src: Defines valid sources of stylesheets.
'self' css.example.com

4>img-src:  sources of images. 
'self' img.example.com

source reference
1>'unsafe-inline': Allows use of inline source elements such as style attribute, onclick, or script tag bodies (depends on the context of the source it is applied to) and javascript: URIs
script-src 'unsafe-inline'

2>'unsafe-eval' : Allows unsafe dynamic code evaluation such as JavaScript eval()
script-src 'unsafe-eval'
