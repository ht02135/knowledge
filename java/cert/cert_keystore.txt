http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html#Prepare_the_Certificate_Keystore

Tomcat currently operates only on JKS, PKCS11 or PKCS12 format keystores

The JKS format is Java's standard "Java KeyStore" format, and is the format created by the keytool command-line utility. This tool is included in the JDK. The PKCS12 format is an internet standard, and can be manipulated via (among other things) OpenSSL and Microsoft's Key-Manager.

Each entry in a keystore is identified by an alias string. Whilst many keystore implementations treat aliases in a case insensitive manner, case sensitive implementations are available.

To import an existing certificate signed by your own CA into a PKCS12 keystore using OpenSSL you would execute a command like:
	
openssl pkcs12 -export -in mycert.crt -inkey mykey.key
                        -out mycert.p12 -name tomcat -CAfile myCA.crt
                        -caname root -chain

--------------

Installing a Certificate from a Certificate Authority
To obtain and install a Certificate from a Certificate Authority (like verisign.com, thawte.com or trustcenter.de)   

In order to obtain a Certificate from the Certificate Authority of your choice you have to create a so called Certificate Signing Request (CSR). That CSR will be used by the Certificate Authority to create a Certificate that will identify your website as "secure". To create a CSR follow these steps:

Create a local self-signed Certificate (as described in the previous section):
		
keytool -genkey -alias tomcat -keyalg RSA
    -keystore <your_keystore_filename>

The CSR is then created with:
		
	
keytool -certreq -keyalg RSA -alias tomcat -file certreq.csr
    -keystore <your_keystore_filename>

Now you have a file called certreq.csr that you can submit to the Certificate Authority (look at the documentation of the Certificate Authority website on how to do this). In return you get a Certificate.		

///////

mporting the Certificate
Now that you have your Certificate you can import it into you local keystore. First of all you have to import a so called Chain Certificate or Root Certificate into your keystore

Download a Chain Certificate from the Certificate Authority you obtained the Certificate from.
For Verisign.com commercial certificates go to: http://www.verisign.com/support/install/intermediate.html
For Verisign.com trial certificates go to: http://www.verisign.com/support/verisign-intermediate-ca/Trial_Secure_Server_Root/index.html
For Trustcenter.de go to: http://www.trustcenter.de/certservices/cacerts/en/en.htm#server
For Thawte.com go to: http://www.thawte.com/certs/trustmap.html
Import the Chain Certificate into your keystore
		
keytool -import -alias root -keystore <your_keystore_filename>
    -trustcacerts -file <filename_of_the_chain_certificate>

And finally import your new Certificate
		
keytool -import -alias tomcat -keystore <your_keystore_filename>
    -file <your_certificate_filename>
    
/////////////////

https://support.dnsimple.com/articles/what-is-ssl-certificate-chain/

There are two types of certificate authorities (CAs): root CAs and intermediate CAs

In order for an SSL certificate to be trusted, that certificate must have been issued by a CA that is included in the trusted store of the device that is connecting.

If the certificate was not issued by a trusted CA, the connecting device (eg. a web browser) will then check to see if the certificate of the issuing CA was issued by a trusted CA, and so on until either a trusted CA is found (at which point a trusted, secure connection will be established) or no trusted CA can be found (at which point the device will usually display an error).

The list of SSL certificates, from the root certificate to the end-user certificate, represents the SSL certificate chain

-------

Let’s suppose that you purchase a certificate from the Awesome Authority for the domain example.awesome

1>Awesome Authority is not a root certificate authority. In other words, its certificate is not directly embedded in your web browser and therefore it can’t be explicitly trusted.

->Awesome Authority utilizes a certificate issued by Intermediate Awesome CA Alpha.
-Intermediate Awesome CA Alpha utilizes a certificate issued by Intermediate Awesome CA Beta.
-Intermediate Awesome CA Beta utilizes a certificate issued by Intermediate Awesome CA Gamma.
-Intermediate Awesome CA Gamma utilizes a certificate issued by The King of Awesomeness.
-The King of Awesomeness is a Root CA. Its certificate is directly embedded in your web browser, therefore it can be explicitly trusted.

In our example, the SSL certificate chain is represented by 6 certificates:

-End-user Certificate - Issued to: example.com; Issued By: Awesome Authority
-Intermediate Certificate 1 - Issued to: Awesome Authority; Issued By: Intermediate Awesome CA Alpha
-Intermediate Certificate 2 - Issued to: Intermediate Awesome CA Alpha; Issued By: Intermediate Awesome CA Beta
-Intermediate Certificate 3 - Issued to: Intermediate Awesome CA Beta; Issued By: Intermediate Awesome CA Gamma
-Intermediate Certificate 4 - Issued to: Intermediate Awesome CA Gamma; Issued By: The King of Awesomeness
-Root certificate - Issued by and to: The King of Awesomeness

1>Certificate 1 is your end-user certificate
2>The certificates from 2 to 5 are called intermediate certificates
3>Certificate 6, the one at the top of the chain (or at the end, depending on how you read the chain), is called root certificate

When you install your end-user certificate for example.awesome, you must bundle all the intermediate certificates and install them along with your end-user certificate. If the SSL certificate chain is invalid or broken, your certificate will not be trusted by some devices.

How do I install the Intermediate SSL certificates?

 Apache requires you to bundle the intermediate SSL certificates and assign the location of the bundle to the SSLCertificateChainFile configuration
 
/////////

https://whatsmychaincert.com/

Did you know that when you install an SSL certificate, you have to install not only your site's certificate, but also one or more intermediate (a.k.a. chain) certificates? Failure to install the correct chain can cause certificate errors in browsers, driving visitors away from your site

To complicate matters, browsers cache chain certificates, meaning that an improperly-configured chain could work in some browsers but not others, making this an annoying problem to debug

You do not need to include the root certificate in the certificate chain that you serve, since clients already have the root certificate in their trust stores. Including the root is inefficient since it increases the size of the SSL handshake

You can generate the combined file (example.com.chained.crt) with a command such as
cat example.com.crt example.com.chain.crt > example.com.chained.crt

SSLCertificateKeyFile /path/to/example.com.key
SSLCertificateFile /path/to/example.com.crt
SSLCertificateChainFile /path/to/example.com.chain.crt
